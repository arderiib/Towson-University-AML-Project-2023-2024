# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mV1-cye_kH3n90mgJmzcleoB54PkLXwb
"""

!pip install ipympl
!pip install contextily
!pip install pointpats
!pip install gdown
# %matplotlib widget

import libpysal as ps
from pointpats import PointPattern
import pointpats.quadrat_statistics as qs
import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import datetime
import shapely
import contextily as ctx
import shapely.geometry
from datetime import datetime

import gdown

import gdown
import geopandas as gpd
import pandas as pd

def download_geospatial_data():
    # Download Crime Data
    crime_id = "1BrYiU8Y7l9WwPPDUdrahendeDAInbAhV"
    crime_url = f'https://drive.google.com/uc?id={crime_id}&export=download'
    crime_file = "Cleaned_Crime_Data2.xlsx"
    gdown.download(crime_url, crime_file, quiet=True)
    #crime_df = pd.read_excel(crime_file, dtype={"Post": "string", "Ethnicity": "string"})
    # Specify the engine parameter as 'openpyxl' for Excel files
    crime_df = pd.read_excel(crime_file, dtype={"Post": "string", "Ethnicity": "string"}, engine='openpyxl')

    # Download Census Tract Data
    cencustract_id = "1wetNwizTYcsXSqyTbksisNu9i7BNPQbH"
    cencustract_url = f'https://drive.google.com/uc?id={cencustract_id}&export=download'
    md_tract_file = "cencustract.zip"
    gdown.download(cencustract_url, md_tract_file, quiet=True)
    md_tract = gpd.read_file(md_tract_file)

    # Download Census Block Group Data
    cencusbg_id = "1WepLNIJp6Y5Yz34BfdT5Mnhze5hepy9i"
    cencusbg_url = f'https://drive.google.com/uc?id={cencusbg_id}&export=download'
    md_bg_file = "cencusbg.zip"
    gdown.download(cencusbg_url, md_bg_file, quiet=True)
    md_bg = gpd.read_file(md_bg_file)

    # Download Baltimore Neighborhood Data
    balt_nbd_id = "1WYXznPtx-uThZe0_vkI_rsxAKGwucZua"
    balt_nbd_url = f'https://drive.google.com/uc?id={balt_nbd_id}&export=download'
    balt_nbd_file = "Neighborhood.zip"
    gdown.download(balt_nbd_url, balt_nbd_file, quiet=True)
    balt_nbd = gpd.read_file(balt_nbd_file)

    # Download Block Data
    #balt_blocks_id = "17U7n1XhnF7bl8ZIVFxL3v6lHbvs6Lo-b"
    #balt_blocks_url = f'https://drive.google.com/uc?id=1Xg4TWacBbtKJJoew-vN5TaOWjCTW5FSE&export=download'
    #balt_blocks_file = "Blocks.zip"
    #gdown.download(balt_blocks_url, balt_blocks_file, quiet=True)
    #balt_blocks = gpd.read_file(balt_blocks_file)


    return {
        "crime_data": crime_df,
        "census_tract": md_tract,
        "census_block_group": md_bg,
        "baltimore_neighborhood": balt_nbd,
        #"baltimore_blocks": balt_blocks,
    }

# Enable custom widget manager
from google.colab import output
output.enable_custom_widget_manager()

# Load geospatial data
data = download_geospatial_data()
crime_df = data["crime_data"]
md_tract = data["census_tract"]
md_bg = data["census_block_group"]
balt_nbd = data["baltimore_neighborhood"]
#balt_blocks = data["baltimore_blocks"]

# Filter Baltimore Tracts
balt_tract = md_tract.loc[md_tract['COUNTYFP'] == '510']

# Create GeoDataFrame for Crime Data
crime_san_df = crime_df
crime_san_gdf = gpd.GeoDataFrame(
    crime_san_df,
    geometry=gpd.points_from_xy(crime_san_df.Longitude, crime_san_df.Latitude),
    crs="EPSG:4326"
)

# Spatial Join with Tracts
tract_join = gpd.sjoin(balt_tract.to_crs('EPSG:4269'), crime_san_gdf.to_crs('EPSG:4269'))

# Pivot Table for Tract Crime Counts
tract_pivot = pd.pivot_table(tract_join, index='GEOID', columns='Description', aggfunc={'Description': len})
tract_pivot.columns = tract_pivot.columns.droplevel()
tract_crime = balt_tract.to_crs('EPSG:4269').merge(tract_pivot, how='left', on="GEOID")

# Spatial Join with Neighborhoods
nbd_join = gpd.sjoin(balt_nbd.to_crs('EPSG:4269'), crime_san_gdf.to_crs('EPSG:4269'))

# Pivot Table for Neighborhood Crime Counts
nbd_pivot = pd.pivot_table(nbd_join, index='OBJECTID', columns='Description', aggfunc={'Description': len})
nbd_pivot.columns = nbd_pivot.columns.droplevel()
nbd_crime = balt_nbd.to_crs('EPSG:4269').merge(nbd_pivot, how='left', on="OBJECTID")

# Enable custom widget manager again
from google.colab import output
output.enable_custom_widget_manager()

# Import required libraries for point pattern analysis
from pointpats import PointPattern
import matplotlib.pyplot as plt

import numpy as np
from pointpats import PointPattern
import pointpats.quadrat_statistics as qs
import matplotlib.pyplot as plt

# Extract x, y coordinates from your crime GeoDataFrame
crime_coordinates = np.array(crime_san_gdf.geometry.apply(lambda geom: (geom.x, geom.y)).tolist())

# Create a PointPattern object
pp_crime = PointPattern(crime_coordinates)

# Specify the number of rows and columns for the quadrats
nx, ny = 3, 3

# Create a QStatistic object for rectangular quadrats and analytical sampling distribution
q_stat_rect = qs.QStatistic(pp_crime, shape="rectangle", nx=nx, ny=ny)

# Plot the quadrats and point counts
q_stat_rect.plot()

# Display chi-squared test statistic and p-value
print("Chi-squared test statistic:", q_stat_rect.chi2)
print("Degrees of freedom:", q_stat_rect.df)
print("Analytical p-value:", q_stat_rect.chi2_pvalue)

# Generate CSR process for empirical sampling distribution
np.random.seed(42)  # Set a seed for reproducibility
min_x, min_y, max_x, max_y = pp_crime.window.bounds
csr_process_coordinates = np.random.uniform(low=min_x, high=max_x, size=(pp_crime.n, 2))
csr_process = PointPattern(csr_process_coordinates)

# Create a QStatistic object for rectangular quadrats and empirical sampling distribution
q_stat_rect_empirical = qs.QStatistic(pp_crime, shape="rectangle", nx=nx, ny=ny, realizations=csr_process)

# Display pseudo p-value
print("Empirical p-value:", q_stat_rect_empirical.chi2_r_pvalue)

import folium

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Add neighborhood boundaries
for _, nbd in nbd_crime.iterrows():
    folium.GeoJson(nbd.geometry).add_to(map_baltimore)

# Display the map
map_baltimore

import folium

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Filter census tracts for Baltimore City (assuming Baltimore city has COUNTYFP '510')
baltimore_city_tracts = md_tract[md_tract['COUNTYFP'] == '510']

# Add census tract boundaries for Baltimore City
for _, tract in baltimore_city_tracts.iterrows():
    folium.GeoJson(tract.geometry).add_to(map_baltimore)

# Display the map
map_baltimore

import folium

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Filter census block groups for Baltimore City (assuming Baltimore city has COUNTYFP '510')
baltimore_city_block_groups = md_bg[md_bg['COUNTYFP'] == '510']

# Add census block group boundaries for Baltimore City
for _, block_group in baltimore_city_block_groups.iterrows():
    folium.GeoJson(block_group.geometry).add_to(map_baltimore)

# Display the map
map_baltimore

import folium
import json

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Filter census tracts for Baltimore City (assuming Baltimore city has COUNTYFP '510')
baltimore_city_tracts = md_tract[md_tract['COUNTYFP'] == '510']

# Extract tract 1703
cen_tract = "1703"
tract_num = balt_tract[balt_tract['NAME'] == cen_tract]

# Create GeoJSON data for tract 1703
geojson_1703 = json.loads(tract_num.to_json())

# Add census tract boundaries for Baltimore City
for _, tract in baltimore_city_tracts.iterrows():
    if tract['NAME'] != cen_tract:
        folium.GeoJson(
            tract.geometry,
            style_function=lambda x: {'color': 'black'}
        ).add_to(map_baltimore)

# Display the map
map_baltimore

import folium
import json

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Filter census tracts for Baltimore City (assuming Baltimore city has COUNTYFP '510')
baltimore_city_tracts = md_tract[md_tract['COUNTYFP'] == '510']

# Extract tract 1703
cen_tract = "1703"
tract_num = balt_tract[balt_tract['NAME'] == cen_tract]

# Create GeoJSON data for tract 1703
geojson_1703 = json.loads(tract_num.to_json())

# Add census tract boundaries for Baltimore City
for _, tract in baltimore_city_tracts.iterrows():
    if tract['NAME'] != cen_tract:
        folium.GeoJson(
            tract.geometry,
            style_function=lambda x: {'color': 'black'}
        ).add_to(map_baltimore)

# Add tract 1703 with specific style
folium.GeoJson(
    geojson_1703,
    style_function=lambda x: {'fillColor': 'red', 'color': 'black', 'fillOpacity': 0.5}
).add_to(map_baltimore)

# Display the map
map_baltimore

import folium

# Create a base map centered around Baltimore
map_baltimore = folium.Map(location=[39.29, -76.61], zoom_start=11)

# Extract a subset of crime coordinates for testing
sample_size = 42000  # Adjust this value as needed
sample_coordinates = crime_san_gdf.head(sample_size).geometry.apply(lambda geom: (geom.y, geom.x)).tolist()

# Add points of interest (crime locations) as circles
for coord in sample_coordinates:
    folium.Circle(
        location=[coord[0], coord[1]],
        radius=2,  # Adjust the radius of the circle as needed
        color='blue',
        fill=True,
        fill_color='blue'
    ).add_to(map_baltimore)

# Display the map
map_baltimore